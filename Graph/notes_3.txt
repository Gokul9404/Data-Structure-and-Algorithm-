Graph Representation done by Ajacency List 

Vertex list         
A
B
C
D
E
F
G
H
-------------------------------------------------
Connection btw vertices is represnted by the following 2-d array (Ajacency matrix):
    0   1   2   3   4   5   6   7   (A-H => 0-7)
0       1   1   1
1   1               1   1
2   1                       1
3   1                           1
4       1                       1
5       1                       1
6           1                   1
7               1   1   1   1

Here the sapce consumption is very high, because in real-world a graph is not densely connected
-------------------------------------------------
Therefore, we use Ajacency list instead of Ajacency matrix.

Ajacency list:-
0   : 1, 2, 3
1   : 0, 4, 5
2   : 0, 6
3   : 0, 7
4   : 1, 7
5   : 1, 7
6   : 2, 7
7   : 3, 4, 5, 6

here, the space consumption is much less than the Ajacency matrix...[Ajacency list size:- 20byte, Ajacency matrix:-8*8=> 64bytes]
-------------------------------------------------
Ajacency list can be implemented by an array or a linked list or a binary search tree[AVL Tree]

thus, we just have to store the head of linked list, or head of AVL Tree, to perform search and delete operations.

Ajacency list will look like:-
Ajacency list => ['a:','b:','c:','d:','e:','f:','g:','h:']  {here :' means it's vertex_list pointer}

here, each vertex_list pointer will store it's edge_list head pointer, and edge_list_pointer will store the edge connection,

For linked-list and AVL Tree implementation, the list will look like below:-
a:   : 0th_head
b:   : 1st_head
c:   : 2nd_head
d:   : 3rd_head
e:   : 4th_head
f:   : 5th_head
g:   : 6th_head
h:   : 7th_head
-------------------------------------------------